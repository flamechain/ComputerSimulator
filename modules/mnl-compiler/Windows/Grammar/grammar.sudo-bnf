statements   ::= NEWLINE* statement (NEWLINE+ statement)* NEWLINE*;

statement    ::= KEYWORD:return expr?
              KEYWORD:continue
              KEYWORD:break
              expr;

expr         ::= KEYWORD:var IDENTIFIER EQ expr
              comp-expr ((KEYWORD:and|KEYWORD:or) comp-expr)*;

comp-expr    ::= not comp-expr
              arith_expr ((EE|LT|GT|LTE|GTE) arith_expr)*;
     
arith_expr   ::= tern ((PLUS|MINUS) term)*;

term         ::= factor ((MUL|DIV) factor)*;

factor       ::= (PLUS|MINUS) factor
              power;

power        ::= call (POW factor)*;

call         ::= atom (LPAREN (expr (COMMA expr)*)? RPAREN)?;

atom         ::= INT|FLOAT|STRING|IDENTIFIER
              LPAREN expr RPAREN
              list-expr
              if-expr
              for-expr
              while-expr
              func-def;

list-expr    ::= LSQUARE (expr (COMMA expr)*)? RSQUARE;

if-expr-a    ::= KEYWORD:if expr KEYWORD:then
              (statement if-expr-b|if-expr-c?)
              | (NEWLINE statements KEYWORD:end|if-expr-b|if-expr-c);

if-expr-b    ::= KEYWORD:elif expr KEYWORD:then
              (statement if-expr-b|if-expr-c?)
              | (NEWLINE statements KEYWORD:end|if-expr-b|if-expr-c);

if-expr-c    ::= KEYWORD:else statement
              | (NEWLINE statements KEYWORD:end);

for-expr     ::= KEYWORD:for IDENTIFIER EQ expr KEYWORD:in range expr
              (KEYWORD:step expr)? KEYWORD:then statement
              | (NEWLINE statements KEYWORD:end);

while-expr   ::= KEYWORD:while expr KEYWORD:then statement
              | (NEWLINE statements KEYWORD:end);

func-def     ::= KEYWORD:def IDENTIFIER?
              LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
              (ARROW expr)
              | (NEWLINE statements KEYWORD:end);
